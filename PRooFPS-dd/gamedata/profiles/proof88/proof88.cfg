!PNGGECFG

# proof88's settings file

# In case of an invalid value specified for a CVAR in this file, a default value will be forced instead and
# error will be logged (check the log file).
# Only the invalid CVARs will be defaulted by the game, other CVARs will be accepted.

#############
#           #
#  NETWORK  #
#           #
#############

# True: game instance will start up as listen-server, false: start up as a client.
# Clients try to connect to the server at address specified in cl_server_ip.
net_server = true


############
#          #
#  SERVER  #
#          #
############

# Which map should be loaded by server?
# Clients load maps as instructed by the server instance.
sv_map = map_warhouse.txt


# Debug: increase this for server to simulate slower rendering. Millisecs. Min value is 1.
#sv_extra_render_delay = 10


##############
#            #
#  GAMEPLAY  #
#            #
##############

# Player's name. Used by server and client instances.
cl_name = PR00F88


# Base frequency of updating game state (physics simulation, weapons, etc.), e.g. 60 means update them 60 times per second.
tickrate = 60
# The primary idea is to have these decoupled from the framerate, so that a too low or too high, or in general an extremely variable frame rate
# won't affect us negatively since each tick is simulated with FIXED delta time / time steps, even if the framerate is unplayable low.
#
# Rule: 20 <= tickrate <= max framerate (which is const 60 Hz currently in PRooFPS-dd).
# TODO: should be still minimum 20?
# TODO: server or client also use it?


# Minimum frequency of updating physics simulation.
physics_rate_min = 60
# E.g.: 60 means it should be updated minimum 60 times per second.
# Server-only property.
# Does not have effect on server->client network traffic.
# Higher value results in more precise physical calculations, but more server-side CPU usage.
# If tickrate is too low, the physics calculation results may allow missing some collisions between objects as fast objects may "jump over" walls,
# players might miss jumping into smaller holes or "entrances".
# To avoid these, the game can run multiple physics iterations per tick with smaller fixed timesteps.
#
# Rules:
#   tickrate <= physics_rate_min (there must be at least 1 physics iteration per tick),
#   physics_rate_min % tickrate == 0 (physics update distribution in time should be constant/even).
#
# The number of physics iterations per tick is calculated as:
#   max(1, physics_rate_min / tickrate).


# Rate at which server sends updates to clients.
cl_updaterate = 60
# Server-only property, thus it should have name like "sv_clupdaterate", but we mimic CS 1.6 CVAR naming.
# Higher value results in clients receiving game state updates more frequently, but it also increases server->client network traffic.
#
# Rules:
#   0 < cl_updaterate <= tickrate,
#   tickrate % cl_updaterate == 0 (clients should receive UPDATED physics results evenly distributed in time).


# IP address of server where client tries to connect to. Ignored by server.
# For localhost use 127.0.0.1.
cl_server_ip = 127.0.0.1


# Debug: increase this for client to simulate slower rendering. Millisecs. Min value is 1.
#cl_extra_render_delay = 10


###########
#         #
#  MOUSE  #
#         #
###########


##############
#            #
#  KEYBOARD  #
#            #
##############


###########
#         #
#  VIDEO  #
#         #
###########

# true: windowed, false: fullscreen
gfx_windowed = true

# true: enable V-Sync, false: disable V-Sync
gfx_vsync = true


###########
#         #
#  AUDIO  #
#         #
###########
