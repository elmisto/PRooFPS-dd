!PNGGECFG

# default settings file

# In case of an invalid value specified for a CVAR in this file, a default value will be forced instead and
# error will be logged (check the log file).
# Only the invalid CVARs will be defaulted by the game, valid CVARs will be still accepted.

# If opened in Notepad++, I recommend setting INI or Makefile syntax highlighting in Language menu.

#############
#           #
#  NETWORK  #
#           #
#############

# True: game instance will start up as listen-server, false: start up as a client.
net_server = true
# Clients try to connect to the server at address specified in cl_server_ip.


# IP address of server where client tries to connect to.
cl_server_ip = 127.0.0.1
# Client-only property.
# For localhost, use: 127.0.0.1.


############
#          #
#  SERVER  #
#          #
############

# Which map should be loaded by server?
sv_map = 
# If left empty, then server immediately starts to loop the mapcycle (gamedata/maps/mapcycle.txt).
# Clients load maps as instructed by the server instance.

# Should server allow players to modify their horizontal movement mid-air?
sv_allow_strafe_mid_air = true
# A lot of FPS games such as CS 1.6 and Quake 3 allow it.
# Some other games such as the original Price of Persia don't allow.

# Should server allow player to FULLY modify their horizontal movement mid-air?
sv_allow_strafe_mid_air_full = false
# Effective only if sv_allow_strafe_mid_air is also true.
# An example of full mid-air strafe control is Super Mario where the player can also negate the initial strafe direction.

# Debug: increase this for server to simulate slower rendering. Millisecs. Min value is 1.
#sv_extra_render_delay = 30

# Time in seconds to wait before starting listening to incoming client connections again.
sv_reconnect_delay = 2
# Example situation is map changing.
# Increasing it is good for testing situation when server is coming back slower than clients.


##############
#            #
#  GAMEPLAY  #
#            #
##############

# Player's name.
cl_name = Player
# Used by server and client instances.
# The max length for name is defined as 10 ASCII characters (MsgUserNameChange::nUserNameBufferLength - 1).
# Server instance makes sure there is no collision between player names.
# If left as empty, the game will generate a name.

# Show main menu at startup and when exiting a game session.
gui_mainmenu = true
# The primary function of the main menu is to allow easy and straightforward modification of this cfg file.
# If you disable it, the only way to modify the configuration is to manually edit this file or use command-line arguments.
# Auto-tests currently don't expect main menu thus they disable it from command-line.

# Base frequency of updating game state (physics simulation, weapons, etc.), e.g. 60 means update them 60 times per second.
tickrate = 60
# Both server and client use it.
# The primary idea is to have game state update decoupled from the framerate, so that a too low or too high or an extremely variable framerate
# won't affect us negatively since each tick is simulated with FIXED delta time / time steps, even if the framerate is unplayable low.
# Also, there is no use to simulate physics too frequently either, e.g. if FPS is 1000, physics simulation frequency is adequate at 60 Hz.
# Good to keep it high for more precise player object control since even though user input is sampled at framerate, controlling the player
# object is done at tickrate.
#
# Rule: 20 <= tickrate <= max framerate (which is const 60 Hz currently in PRooFPS-dd).


# Minimum frequency of updating physics simulation.
physics_rate_min = 60
# E.g.: 60 means it should be updated minimum 60 times per second.
# Both server and client use it, even though on client-side it is used only for updating bullet movement.
# Does not have effect on "server -> client" network traffic.
# Higher value results in more precise physics calculations, but more server-side CPU usage.
# If tickrate is too low, physics calculation results may allow missed collisions between objects: fast objects may "jump over" walls,
# players might miss jumping into smaller holes or "entrances".
# To avoid these, the game can run multiple physics iterations per tick with smaller fixed timesteps.
# However, it is good to keep it high so that the same sampled player input is repeated less times per tick in the physics iterations.
#
# Rules:
#   tickrate <= physics_rate_min (there must be at least 1 physics iteration per tick),
#   physics_rate_min % tickrate == 0 (physics update distribution in time should be constant/even),
#   physics_rate_min <= 60           (due to some limitation in the game).
#
# The number of physics iterations per tick is calculated as:
#   max(1, physics_rate_min / tickrate).


# Frequency at which server sends updates to clients.
cl_updaterate = 60
# Server-only property, thus it should have name like "sv_clupdaterate", but we mimic CS 1.6 CVAR naming.
# Higher value results in clients receiving game state updates more frequently, but it also increases "server -> client" network traffic.
# It also affects the server-side player updates, so it is easy to test it by running the server instance only.
#
# Rules:
#   0 < cl_updaterate <= tickrate,
#   tickrate % cl_updaterate == 0 (clients should receive UPDATED physics results evenly distributed in time).


# Debug: increase this for client to simulate slower rendering. Millisecs. Min value is 1.
#cl_extra_render_delay = 10


# Time in seconds to wait before trying to connect back to server.
cl_reconnect_delay = 2
# Example situation is map changing.
# Increasing it is good for testing situation when client is coming back slower than the server.


###########
#         #
#  MOUSE  #
#         #
###########


##############
#            #
#  KEYBOARD  #
#            #
##############


###########
#         #
#  VIDEO  #
#         #
###########

# true: windowed, false: fullscreen
gfx_windowed = true
# When fullscreen mode is selected, the display resolution is not changed.

# true: enable V-Sync, false: disable V-Sync
gfx_vsync = false
# V-Sync is useful for avoiding the screen tearing effect that happens when framerate and screen refresh rate are out of sync.
# However, if you enable V-Sync, the maximum available framerate will be the screen refresh rate, and in some cases it can cause
# significantly lower framerate than otherwise would be available.
# If you have too low framerate, try disabling it.

# Should the 3rd-person camera follow the player AND the crosshair too?
gfx_cam_follows_xhair = true
# True: follow both the player AND the crosshair (default from v0.1.5), false: camera follows the player only (pre-v0.1.5 behavior).

# Should the camera tilt during changing its position?
gfx_cam_tilting = true
# True: yes (default from v0.1.5), false: no (pre-v0.1.5 behavior).


###########
#         #
#  AUDIO  #
#         #
###########
